; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt < %s -passes=obf-cf --obfuscate-cf-seed=1 -S | FileCheck %s

define i32 @basic(i32 %0) {
; CHECK-LABEL: define i32 @basic
; CHECK-SAME: (i32 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = sub i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP0]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP0]])
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP5]], [[TMP4]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[TMP9:%.*]], label [[TMP7:%.*]]
; CHECK:       7:
; CHECK-NEXT:    br label [[TMP10:%.*]]
; CHECK:       8:
; CHECK-NEXT:    ret i32 [[TMP0]]
; CHECK:       9:
; CHECK-NEXT:    br label [[TMP10]]
; CHECK:       10:
; CHECK-NEXT:    br label [[TMP8:%.*]]
;
  br label %2
2:
  ret i32 %0
}

define i32 @_Z4facti(i32 %0) {
; CHECK-LABEL: define i32 @_Z4facti
; CHECK-SAME: (i32 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i32 [[TMP0]], 0
; CHECK-NEXT:    br i1 [[TMP2]], label [[TMP3:%.*]], label [[TMP9:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[TMP4:%.*]] = sub i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP5:%.*]] = and i32 [[TMP0]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP0]])
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ult i32 [[TMP7]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[TMP20:%.*]], label [[TMP18:%.*]]
; CHECK:       9:
; CHECK-NEXT:    [[TMP10:%.*]] = sub nsw i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @_Z4facti(i32 [[TMP10]])
; CHECK-NEXT:    [[TMP12:%.*]] = mul nsw i32 [[TMP0]], [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = sub i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP14:%.*]] = and i32 [[TMP0]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP14]])
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP0]])
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ult i32 [[TMP16]], [[TMP15]]
; CHECK-NEXT:    br i1 [[TMP17]], label [[TMP23:%.*]], label [[TMP18]]
; CHECK:       18:
; CHECK-NEXT:    [[DOT0:%.*]] = phi i32 [ 1, [[TMP3]] ], [ [[TMP12]], [[TMP9]] ]
; CHECK-NEXT:    br label [[TMP24:%.*]]
; CHECK:       19:
; CHECK-NEXT:    ret i32 [[TMP22:%.*]]
; CHECK:       20:
; CHECK-NEXT:    br label [[TMP21:%.*]]
; CHECK:       21:
; CHECK-NEXT:    [[TMP22]] = phi i32 [ [[TMP25:%.*]], [[TMP24]] ], [ [[TMP0]], [[TMP20]] ]
; CHECK-NEXT:    br label [[TMP19:%.*]]
; CHECK:       23:
; CHECK-NEXT:    br label [[TMP24]]
; CHECK:       24:
; CHECK-NEXT:    [[TMP25]] = phi i32 [ [[DOT0]], [[TMP18]] ], [ [[TMP0]], [[TMP23]] ]
; CHECK-NEXT:    br label [[TMP21]]
;
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  br label %8

4:                                                ; preds = %1
  %5 = sub nsw i32 %0, 1
  %6 = call i32 @_Z4facti(i32 %5)
  %7 = mul nsw i32 %0, %6
  br label %8

8:                                                ; preds = %4, %3
  %.0 = phi i32 [ 1, %3 ], [ %7, %4 ]
  ret i32 %.0
}

define void @foo(i32 %arg, i32 %arg1, i32 (i32, i32)* %arg2) {
; CHECK-LABEL: define void @foo
; CHECK-SAME: (i32 [[ARG:%.*]], i32 [[ARG1:%.*]], ptr [[ARG2:%.*]]) {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    br label [[BB3:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    [[ABC:%.*]] = phi i32 [ [[ARG1]], [[BB:%.*]] ], [ [[ABC4:%.*]], [[BB7:%.*]] ]
; CHECK-NEXT:    [[ABC4]] = phi i32 [ [[ARG]], [[BB]] ], [ [[ABC]], [[BB7]] ]
; CHECK-NEXT:    [[ABC5:%.*]] = call i32 [[ARG2]](i32 [[ABC4]], i32 [[ABC]])
; CHECK-NEXT:    [[ABC6:%.*]] = icmp ne i32 [[ABC5]], 0
; CHECK-NEXT:    br i1 [[ABC6]], label [[BB7]], label [[BB8:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    br label [[BB3]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  br label %bb3

bb3:                                              ; preds = %bb7, %bb
  %abc = phi i32 [ %arg1, %bb ], [ %abc4, %bb7 ]
  %abc4 = phi i32 [ %arg, %bb ], [ %abc, %bb7 ]
  %abc5 = call i32 %arg2(i32 %abc4, i32 %abc)
  %abc6 = icmp ne i32 %abc5, 0
  br i1 %abc6, label %bb7, label %bb8

bb7:                                              ; preds = %bb3
  br label %bb3

bb8:                                              ; preds = %bb3
  ret void
}

define linkonce_odr void @abcd() {
; CHECK-LABEL: define linkonce_odr void @abcd() {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.ctpop.i32(i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.ctpop.i32(i32 0)
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ult i32 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[TMP13:%.*]], label [[TMP6:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr null, align 4
; CHECK-NEXT:    br i1 false, label [[TMP6]], label [[TMP12:%.*]]
; CHECK:       6:
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = and i32 [[TMP2]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP2]])
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ult i32 [[TMP10]], [[TMP9]]
; CHECK-NEXT:    br i1 [[TMP11]], label [[TMP15:%.*]], label [[TMP14:%.*]]
; CHECK:       12:
; CHECK-NEXT:    ret void
; CHECK:       13:
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       14:
; CHECK-NEXT:    br label [[TMP16:%.*]]
; CHECK:       15:
; CHECK-NEXT:    br label [[TMP16]]
; CHECK:       16:
; CHECK-NEXT:    br label [[TMP12]]
;
  br label %3

1:                                                ; No predecessors!
  %2 = load i32, ptr null, align 4
  br i1 false, label %3, label %4

3:                                                ; preds = %1, %0
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { ptr, ptr, ptr }

define i32 @foo2(ptr align 8 %0) {
; CHECK-LABEL: define i32 @foo2
; CHECK-SAME: (ptr align 8 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data", ptr [[TMP0]], i64 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP2]], [[TMP4]]
; CHECK-NEXT:    br i1 [[TMP5]], label [[TMP6:%.*]], label [[TMP10:%.*]]
; CHECK:       6:
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @llvm.ctpop.i32(i32 0)
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @llvm.ctpop.i32(i32 0)
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ult i32 [[TMP8]], [[TMP7]]
; CHECK-NEXT:    br i1 [[TMP9]], label [[TMP35:%.*]], label [[TMP33:%.*]]
; CHECK:       10:
; CHECK-NEXT:    br label [[TMP11:%.*]]
; CHECK:       11:
; CHECK-NEXT:    [[DOTSROA_07_0:%.*]] = phi ptr [ [[TMP2]], [[TMP10]] ], [ [[TMP12:%.*]], [[TMP42:%.*]] ]
; CHECK-NEXT:    [[DOTSROA_02_0_I_I:%.*]] = phi ptr [ [[TMP2]], [[TMP10]] ], [ [[TMP43:%.*]], [[TMP42]] ]
; CHECK-NEXT:    [[TMP12]] = getelementptr inbounds i32, ptr [[DOTSROA_07_0]], i64 1
; CHECK-NEXT:    [[DOTNOT:%.*]] = icmp eq ptr [[TMP12]], [[TMP4]]
; CHECK-NEXT:    br i1 [[DOTNOT]], label [[TMP29:%.*]], label [[TMP13:%.*]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[DOTSROA_02_0_I_I]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP12]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = icmp slt i32 [[TMP14]], [[TMP15]]
; CHECK-NEXT:    br i1 [[TMP16]], label [[TMP17:%.*]], label [[TMP23:%.*]]
; CHECK:       17:
; CHECK-NEXT:    [[TMP18:%.*]] = sub i32 [[TMP15]], 1
; CHECK-NEXT:    [[TMP19:%.*]] = and i32 [[TMP15]], [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP19]])
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP15]])
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ult i32 [[TMP21]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP22]], label [[TMP38:%.*]], label [[TMP23]]
; CHECK:       23:
; CHECK-NEXT:    [[DOTSROA_02_1_I_I:%.*]] = phi ptr [ [[TMP12]], [[TMP17]] ], [ [[DOTSROA_02_0_I_I]], [[TMP13]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = sub i32 [[TMP15]], 1
; CHECK-NEXT:    [[TMP25:%.*]] = and i32 [[TMP15]], [[TMP24]]
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP25]])
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @llvm.ctpop.i32(i32 [[TMP15]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ult i32 [[TMP27]], [[TMP26]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[TMP41:%.*]], label [[TMP39:%.*]]
; CHECK:       29:
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.ctpop.i32(i32 0)
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.ctpop.i32(i32 0)
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i32 [[TMP31]], [[TMP30]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[TMP44:%.*]], label [[TMP33]]
; CHECK:       33:
; CHECK-NEXT:    [[DOTSROA_05_0_I_I:%.*]] = phi ptr [ [[TMP2]], [[TMP6]] ], [ [[DOTSROA_02_0_I_I]], [[TMP29]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr [[DOTSROA_05_0_I_I]], align 4
; CHECK-NEXT:    br label [[TMP45:%.*]]
; CHECK:       _ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEET_S7_S7_.exit:
; CHECK-NEXT:    ret i32 [[TMP37:%.*]]
; CHECK:       35:
; CHECK-NEXT:    br label [[TMP36:%.*]]
; CHECK:       36:
; CHECK-NEXT:    [[TMP37]] = phi i32 [ [[TMP46:%.*]], [[TMP45]] ], [ 0, [[TMP35]] ]
; CHECK-NEXT:    br label [[_ZST11MAX_ELEMENTIN9__GNU_CXX17__NORMAL_ITERATORIPIST6VECTORIISAIIEEEEET_S7_S7__EXIT:%.*]]
; CHECK:       38:
; CHECK-NEXT:    br label [[TMP39]]
; CHECK:       39:
; CHECK-NEXT:    [[TMP40:%.*]] = phi ptr [ [[DOTSROA_02_1_I_I]], [[TMP23]] ], [ [[TMP4]], [[TMP38]] ]
; CHECK-NEXT:    br label [[TMP42]]
; CHECK:       41:
; CHECK-NEXT:    br label [[TMP42]]
; CHECK:       42:
; CHECK-NEXT:    [[TMP43]] = phi ptr [ [[TMP40]], [[TMP39]] ], [ [[TMP2]], [[TMP41]] ]
; CHECK-NEXT:    br label [[TMP11]]
; CHECK:       44:
; CHECK-NEXT:    br label [[TMP45]]
; CHECK:       45:
; CHECK-NEXT:    [[TMP46]] = phi i32 [ [[TMP34]], [[TMP33]] ], [ 0, [[TMP44]] ]
; CHECK-NEXT:    br label [[TMP36]]
;
  %2 = load ptr, ptr %0, align 8
  %3 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data", ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8
  %5 = icmp eq ptr %2, %4
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  br label %_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEET_S7_S7_.exit

7:                                                ; preds = %1
  br label %8

8:                                                ; preds = %15, %7
  %.sroa.07.0 = phi ptr [ %2, %7 ], [ %9, %15 ]
  %.sroa.02.0.i.i = phi ptr [ %2, %7 ], [ %.sroa.02.1.i.i, %15 ]
  %9 = getelementptr inbounds i32, ptr %.sroa.07.0, i64 1
  %.not = icmp eq ptr %9, %4
  br i1 %.not, label %16, label %10

10:                                               ; preds = %8
  %11 = load i32, ptr %.sroa.02.0.i.i, align 4
  %12 = load i32, ptr %9, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  br label %15

15:                                               ; preds = %14, %10
  %.sroa.02.1.i.i = phi ptr [ %9, %14 ], [ %.sroa.02.0.i.i, %10 ]
  br label %8

16:                                               ; preds = %8
  br label %_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEET_S7_S7_.exit

_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEET_S7_S7_.exit: ; preds = %6, %16
  %.sroa.05.0.i.i = phi ptr [ %2, %6 ], [ %.sroa.02.0.i.i, %16 ]
  %17 = load i32, ptr %.sroa.05.0.i.i, align 4
  ret i32 %17
}

declare void @llvm.lifetime.start.p0(i64, ptr)
declare void @llvm.lifetime.end.p0(i64, ptr)
declare void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
